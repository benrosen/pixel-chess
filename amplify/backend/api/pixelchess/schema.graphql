type Game
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: public, provider: iam, operations: [create] }
      { allow: owner, ownerField: "players", operations: [read] }
    ]
  )
  @model(mutations: null, subscriptions: null)
  @versioned {
  id: ID!
  moveText: String
    @auth(
      rules: [{ allow: owner, ownerField: "players", operations: [update] }]
    )
  players: [String!]!
    @auth(rules: [{ allow: public, provider: iam, operations: [update] }])
  status: Status!
    @auth(rules: [{ allow: private, provider: iam, operations: [update] }])
}

# TODO configure lambda resolvers for these mutations
type Mutation {
  createGame: Game
  updateGame(input: UpdateGameInput): Game
}

enum Status {
  PENDING
  UNDERWAY
  DRAW
  BLACK_WON
  WHITE_WON
}

type Subscription {
  onUpdateGame(owner: String): Game @aws_subscribe(mutations: ["updateGame"])
}

input UpdateGameInput {
  id: ID!
  moveText: String
  players: [String]
  status: Status
}
