input AppendMoveTextInput {
  gameId: ID!
  moveText: String!
}

# TODO configure createConnection resolver
# TODO configure deleteConnection resolver
# TODO update Game when connection is created/deleted
type Connection
  @aws_iam
  @auth(
    rules: [
      { allow: public, provider: iam, operations: [create] }
      { allow: owner, operations: [delete] }
    ]
  )
  @model(mutations: null, subscriptions: null) {
  id: ID!
  gameId: ID!
  game: Game @connection(fields: ["gameId"]) @aws_iam
}

input CreateConnectionInput {
  gameId: ID!
}

input CreateMoveInput {
  gameId: ID!
}

input DeleteConnectionInput {
  id: ID!
}

type Game
  @aws_iam
  @auth(
    rules: [
      { allow: private, provider: iam, operations: [update] }
      { allow: public, provider: iam, operations: [create] }
    ]
  )
  @model(mutations: null, subscriptions: null)
  @versioned {
  id: ID!
  black: String
  moveText: String
  status: Status!
  white: String
}

# TODO configure createMove resolver
# TODO update Game when move is created
type Move
  @aws_iam
  @auth(rules: [{ allow: public, provider: iam, operations: [create] }])
  @model(mutations: null, subscriptions: null) {
  id: ID!
  gameId: ID!
  moveText: String!
}

# TODO create resolvers for all of these mutations
# TODO try to use @aws_iam on the type instead of all the fields
type Mutation {
  appendMoveText(input: AppendMoveTextInput!): Game @aws_iam
  createConnection(input: CreateConnectionInput!): Connection @aws_iam
  createGame: Game @aws_iam
  createMove(input: CreateMoveInput!): Move @aws_iam
  deleteConnection(input: DeleteConnectionInput!): Connection @aws_iam
  setBlackPlayer(input: SetPlayerInput!): Game @aws_iam
  setWhitePlayer(input: SetPlayerInput!): Game @aws_iam
  updateStatus(input: UpdateStatusInput!): Game @aws_iam
}

input SetPlayerInput {
  gameId: ID!
  playerId: ID!
}

enum Status {
  PENDING
  UNDERWAY
  DRAW
  BLACK_WON
  WHITE_WON
}

type Subscription {
  onUpdateGame(id: ID!): Game
    @aws_iam
    @aws_subscribe(
      mutations: [
        "appendMoveText"
        "setBlackPlayer"
        "setWhitePlayer"
        "updateStatus"
      ]
    )
}

input UpdateStatusInput {
  gameId: ID!
  status: Status!
}
